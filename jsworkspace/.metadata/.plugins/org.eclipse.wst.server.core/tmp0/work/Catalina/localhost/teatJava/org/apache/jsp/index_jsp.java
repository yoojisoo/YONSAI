/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.70
 * Generated at: 2021-08-23 06:32:55 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>웹 페이지 레이아웃</title>\r\n");
      out.write("<script src=\"js/jquery-3.6.0.js\"></script>\r\n");
      out.write("\r\n");
      out.write("<!-- 합쳐지고 최소화된 최신 CSS -->\r\n");
      out.write("<link rel=\"stylesheet\"\r\n");
      out.write("	href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.2/css/bootstrap.min.css\">\r\n");
      out.write("\r\n");
      out.write("<!-- 부가적인 테마 -->\r\n");
      out.write("<link rel=\"stylesheet\"\r\n");
      out.write("	href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.2/css/bootstrap-theme.min.css\">\r\n");
      out.write("\r\n");
      out.write("<!-- 합쳐지고 최소화된 최신 자바스크립트 -->\r\n");
      out.write("<script\r\n");
      out.write("	src=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.2/js/bootstrap.min.js\"></script>\r\n");
      out.write("\r\n");
      out.write("<style>\r\n");
      out.write("body {\r\n");
      out.write("	font: 14px/1.8 Arial, Helvetica, sans-serif;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".frame {\r\n");
      out.write("	width: 800px;\r\n");
      out.write("	margin: 0 auto;\r\n");
      out.write("	border: 1px solid #aaa;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".header {\r\n");
      out.write("	padding: 40px 10px;\r\n");
      out.write("	text-align: center;\r\n");
      out.write("	background: #eee;\r\n");
      out.write("	margin-bottom: 20px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".logo {\r\n");
      out.write("	font-size: 2em;\r\n");
      out.write("	font-weight: bold;\r\n");
      out.write("	background: #5457de;\r\n");
      out.write("	color: #fff;\r\n");
      out.write("	display: inline-block;\r\n");
      out.write("	padding: 0 8px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".container {\r\n");
      out.write("	overflow: hidden;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".nav {\r\n");
      out.write("	float: left;\r\n");
      out.write("	width: 150px;\r\n");
      out.write("	background: #333;\r\n");
      out.write("	color: #fff;\r\n");
      out.write("	margin-right: 50px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".nav-list {\r\n");
      out.write("	list-style: none;\r\n");
      out.write("	margin: 0;\r\n");
      out.write("	padding: 10px 0;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".nav-item {\r\n");
      out.write("	margin: 4px 0;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".nav-link {\r\n");
      out.write("	display: block;\r\n");
      out.write("	text-decoration: none;\r\n");
      out.write("	color: #fff;\r\n");
      out.write("	padding: 4px 10px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".nav-link:hover {\r\n");
      out.write("	background: #5457de;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".content {\r\n");
      out.write("	float: left;\r\n");
      out.write("	width: 600px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".footer {\r\n");
      out.write("	text-align: center;\r\n");
      out.write("	border-top: 1px solid #aaa;\r\n");
      out.write("	margin: 20px 20px 0;\r\n");
      out.write("	font-size: 12px;\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<div class=\"frame\">\r\n");
      out.write("		");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "include/header.jsp", out, false);
      out.write("\r\n");
      out.write("		<div class=\"container\">\r\n");
      out.write("			<div class=\"nav\">\r\n");
      out.write("				<ul class=\"nav-list\">\r\n");
      out.write("					<li class=\"nav-item\"><a href=\"#\" class=\"nav-link\">메뉴1</a></li>\r\n");
      out.write("					<li class=\"nav-item\"><a href=\"#\" class=\"nav-link\">메뉴2</a></li>\r\n");
      out.write("					<li class=\"nav-item\"><a href=\"#\" class=\"nav-link\">메뉴3</a></li>\r\n");
      out.write("				</ul>\r\n");
      out.write("			</div>\r\n");
      out.write("				<div class=\"content\">\r\n");
      out.write("					<h1>레이아웃을 구성함.</h1>\r\n");
      out.write("					<div>\r\n");
      out.write("					정규 표현식은 문자열에 나타는 특정 문자 조합과 대응시키기 위해 사용되는 패턴입니다.<br>\r\n");
      out.write("					자바스크립트에서,정규 표현식 또한 객체입니다. 이 패턴들은 RegExp의 exec 메소드와<br>\r\n");
      out.write("					test메소드, 그리고 String의 match메소드, replace메소드, search메소드,<br>\r\n");
      out.write("					이 장에서는자바스크립트의 정규식에 대하여 설명합니다.\r\n");
      out.write("					</div>\r\n");
      out.write("					\r\n");
      out.write("					<!-- Button trigger modal -->\r\n");
      out.write("					<button type=\"button\" class=\"btn btn-primary btn-lg\"\r\n");
      out.write("						data-toggle=\"modal\" data-target=\"#myModal\">Launch demo	modal</button>\r\n");
      out.write("\r\n");
      out.write("				</div>\r\n");
      out.write("			<!-- Modal -->\r\n");
      out.write("			<div class=\"modal fade\" id=\"myModal\" tabindex=\"-1\" role=\"dialog\"\r\n");
      out.write("				aria-labelledby=\"myModalLabel\" aria-hidden=\"true\">\r\n");
      out.write("				<div class=\"modal-dialog\">\r\n");
      out.write("					<div class=\"modal-content\">\r\n");
      out.write("						<div class=\"modal-header\">\r\n");
      out.write("							<button type=\"button\" class=\"close\" data-dismiss=\"modal\"\r\n");
      out.write("								aria-label=\"Close\">\r\n");
      out.write("								<span aria-hidden=\"true\">&times;</span>\r\n");
      out.write("							</button>\r\n");
      out.write("							<h4 class=\"modal-title\" id=\"myModalLabel\">제목</h4>\r\n");
      out.write("						</div>\r\n");
      out.write("						<div class=\"modal-body\">내용 내용</div>\r\n");
      out.write("						<div class=\"modal-footer\">\r\n");
      out.write("							<button type=\"button\" class=\"btn btn-default\"\r\n");
      out.write("								data-dismiss=\"modal\">Close</button>\r\n");
      out.write("							<button type=\"button\" class=\"btn btn-primary\">Save\r\n");
      out.write("								changes</button>\r\n");
      out.write("						</div>\r\n");
      out.write("					</div>\r\n");
      out.write("				</div>\r\n");
      out.write("			</div>\r\n");
      out.write("		</div>\r\n");
      out.write("		");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "include/foot.jsp", out, false);
      out.write("\r\n");
      out.write("	</div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
